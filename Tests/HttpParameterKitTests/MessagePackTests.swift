@testable import HttpParameterKit
import XCTest

extension Optional where Wrapped == Data {
	var array: [UInt8] {
		map(Array.init) ?? []
	}
}

final class MessagePackTests: XCTestCase {
	func testNil() throws {
		XCTAssertEqual(try HPNil("nil").msgpack(()).array, [])
	}

	func testNilSuppress() throws {
		XCTAssertEqual(try HPNil("nil", suppressDefault: false).msgpack(()).array, [0xA3, 0x6E, 0x69, 0x6C, 0xC0])
	}

	func testBoolFalse() throws {
		XCTAssertEqual(try HPBool("boolean").msgpack(false).array, [])
	}

	func testBoolFalseSuppress() throws {
		XCTAssertEqual(try HPBool("boolean", suppressDefault: false).msgpack(false).array, [0xA7, 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0xC2])
	}

	func testBoolTrue() throws {
		XCTAssertEqual(try HPBool("boolean").msgpack(true).array, [0xA7, 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0xC3])
	}

	func testBoolTrueSuppress() throws {
		XCTAssertEqual(try HPBool("boolean", suppressDefault: false).msgpack(true).array, [0xA7, 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0xC3])
	}

	func testInt() throws {
		XCTAssertEqual(try HPInt("int").msgpack(0).array, [])
		XCTAssertEqual(try HPInt("int").msgpack(Int.min).array, [0xA3, 0x69, 0x6E, 0x74, 0xD3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt("int").msgpack(Int.max).array, [0xA3, 0x69, 0x6E, 0x74, 0xD3, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
	}

	func testIntSuppress() throws {
#if arch(i386) || arch(arm)
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int.min).array, [0xA3, 0x69, 0x6E, 0x74, 0xD2, 0x80, 0x00, 0x00, 0x00])
#else
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int.min).array, [0xA3, 0x69, 0x6E, 0x74, 0xD3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int32.min) - 1).array, [0xA3, 0x69, 0x6E, 0x74, 0xD3, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int32.min)).array, [0xA3, 0x69, 0x6E, 0x74, 0xD2, 0x80, 0x00, 0x00, 0x00])
#endif
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int16.min) - 1).array, [0xA3, 0x69, 0x6E, 0x74, 0xD2, 0xFF, 0xFF, 0x7F, 0xFF])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int16.min)).array, [0xA3, 0x69, 0x6E, 0x74, 0xD1, 0x80, 0x00])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int8.min) - 1).array, [0xA3, 0x69, 0x6E, 0x74, 0xD1, 0xFF, 0x7F])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int8.min)).array, [0xA3, 0x69, 0x6E, 0x74, 0xD0, 0x80])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(-33).array, [0xA3, 0x69, 0x6E, 0x74, 0xD0, 0xDF])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(-32).array, [0xA3, 0x69, 0x6E, 0x74, 0xE0])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(0).array, [0xA3, 0x69, 0x6E, 0x74, 0x00])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int8.max)).array, [0xA3, 0x69, 0x6E, 0x74, 0x7F])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int8.max) + 1).array, [0xA3, 0x69, 0x6E, 0x74, 0xD1, 0x00, 0x80])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int16.max)).array, [0xA3, 0x69, 0x6E, 0x74, 0xD1, 0x7F, 0xFF])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int16.max) + 1).array, [0xA3, 0x69, 0x6E, 0x74, 0xD2, 0x00, 0x00, 0x80, 0x00])
#if arch(i386) || arch(arm)
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int.max).array, [0xA3, 0x69, 0x6E, 0x74, 0xD2, 0x7F, 0xFF, 0xFF, 0xFF])
#else
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int32.max)).array, [0xA3, 0x69, 0x6E, 0x74, 0xD2, 0x7F, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int(Int32.max) + 1).array, [0xA3, 0x69, 0x6E, 0x74, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt("int", suppressDefault: false).msgpack(Int.max).array, [0xA3, 0x69, 0x6E, 0x74, 0xD3, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
#endif
		XCTAssertThrowsError(try HPInt("int", min: Int.min + 1).msgpack(Int.min))
		XCTAssertThrowsError(try HPInt("int", max: Int.max - 1).msgpack(Int.max))
	}

	func testInt8() throws {
		XCTAssertEqual(try HPInt8("int8").msgpack(0).array, [])
		XCTAssertEqual(try HPInt8("int8").msgpack(Int8.min).array, [0xA4, 0x69, 0x6E, 0x74, 0x38, 0xD0, 0x80])
		XCTAssertEqual(try HPInt8("int8").msgpack(Int8.max).array, [0xA4, 0x69, 0x6E, 0x74, 0x38, 0x7F])
	}

	func testInt8Suppress() throws {
		XCTAssertEqual(try HPInt8("int8", suppressDefault: false).msgpack(0).array, [0xA4, 0x69, 0x6E, 0x74, 0x38, 0x00])
		XCTAssertEqual(try HPInt8("int8", suppressDefault: false).msgpack(Int8.min).array, [0xA4, 0x69, 0x6E, 0x74, 0x38, 0xD0, 0x80])
		XCTAssertEqual(try HPInt8("int8", suppressDefault: false).msgpack(Int8.max).array, [0xA4, 0x69, 0x6E, 0x74, 0x38, 0x7F])
		XCTAssertThrowsError(try HPInt8("int8", min: Int8.min + 1).msgpack(Int8.min).array)
		XCTAssertThrowsError(try HPInt8("int8", max: Int8.max - 1).msgpack(Int8.max).array)
	}

	func testInt16() throws {
		XCTAssertEqual(try HPInt16("int16").msgpack(0).array, [])
		XCTAssertEqual(try HPInt16("int16").msgpack(Int16.min).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD1, 0x80, 0x00])
		XCTAssertEqual(try HPInt16("int16").msgpack(Int16.max).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD1, 0x7F, 0xFF])
	}

	func testInt16Suppress() throws {
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(Int16.min).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD1, 0x80, 0x00])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(Int16(Int8.min) - 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD1, 0xFF, 0x7F])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(Int16(Int8.min)).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD0, 0x80])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(-33).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD0, 0xDF])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(-32).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xE0])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(0).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0x00])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(Int16(Int8.max)).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0x7F])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(Int16(Int8.max) + 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD1, 0x00, 0x80])
		XCTAssertEqual(try HPInt16("int16", suppressDefault: false).msgpack(Int16.max).array, [0xA5, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xD1, 0x7F, 0xFF])
		XCTAssertThrowsError(try HPInt16("int16", min: Int16.min + 1).msgpack(Int16.min))
		XCTAssertThrowsError(try HPInt16("int16", max: Int16.max - 1).msgpack(Int16.max))
	}

	func testInt32() throws {
		XCTAssertEqual(try HPInt32("int32").msgpack(0).array, [])
		XCTAssertEqual(try HPInt32("int32").msgpack(Int32.min).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD2, 0x80, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt32("int32").msgpack(Int32.max).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD2, 0x7F, 0xFF, 0xFF, 0xFF])
	}

	func testInt32Suppress() throws {
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32.min).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD2, 0x80, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int16.min) - 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD2, 0xFF, 0xFF, 0x7F, 0xFF])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int16.min)).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD1, 0x80, 0x00])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int8.min) - 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD1, 0xFF, 0x7F])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int8.min)).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD0, 0x80])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(-33).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD0, 0xDF])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(-32).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xE0])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(0).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x00])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int8.max)).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x7F])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int8.max) + 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD1, 0x00, 0x80])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int16.max)).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD1, 0x7F, 0xFF])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32(Int16.max) + 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD2, 0x00, 0x00, 0x80, 0x00])
		XCTAssertEqual(try HPInt32("int32", suppressDefault: false).msgpack(Int32.max).array, [0xA5, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xD2, 0x7F, 0xFF, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPInt32("int32", min: Int32.min + 1).msgpack(Int32.min))
		XCTAssertThrowsError(try HPInt32("int32", max: Int32.max - 1).msgpack(Int32.max))
	}

	func testInt64() throws {
		XCTAssertEqual(try HPInt64("int64").msgpack(0).array, [])
		XCTAssertEqual(try HPInt64("int64").msgpack(Int64.max).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD3, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPInt64("int64").msgpack(Int64.min).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
	}

	func testInt64Suppress() throws {
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64.min).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int32.min) - 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD3, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int32.min)).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD2, 0x80, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int16.min) - 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD2, 0xFF, 0xFF, 0x7F, 0xFF])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int16.min)).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD1, 0x80, 0x00])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int8.min) - 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD1, 0xFF, 0x7F])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int8.min)).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD0, 0x80])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(-33).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD0, 0xDF])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(-32).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xE0])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(0).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0x00])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int8.max)).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0x7F])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int8.max) + 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD1, 0x00, 0x80])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int16.max)).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD1, 0x7F, 0xFF])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int16.max) + 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD2, 0x00, 0x00, 0x80, 0x00])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int32.max)).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD2, 0x7F, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64(Int32.max) + 1).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPInt64("int64", suppressDefault: false).msgpack(Int64.max).array, [0xA5, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xD3, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPInt64("int64", min: Int64.min + 1).msgpack(Int64.min))
		XCTAssertThrowsError(try HPInt64("int64", max: Int64.max - 1).msgpack(Int64.max))
	}

	func testUInt() throws {
		XCTAssertEqual(try HPUInt("uint").msgpack(0).array, [])
		XCTAssertEqual(try HPUInt("uint").msgpack(UInt.max).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
	}

	func testUIntSuppress() throws {
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(0).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0x00])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(127).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0x7F])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(128).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCC, 0x80])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt(UInt8.max)).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCC, 0xFF])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt(UInt8.max) + 1).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCD, 0x01, 0x00])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt(UInt16.max)).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCD, 0xFF, 0xFF])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt(UInt16.max) + 1).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCE, 0x00, 0x01, 0x00, 0x00])
#if arch(i386) || arch(arm)
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt.max).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF])
#else
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt(UInt32.max)).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt(UInt32.max) + 1).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPUInt("uint", suppressDefault: false).msgpack(UInt.max).array, [0xA4, 0x75, 0x69, 0x6E, 0x74, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
#endif
		XCTAssertThrowsError(try HPUInt("uint", min: UInt.min + 1).msgpack(UInt.min))
		XCTAssertThrowsError(try HPUInt("uint", max: UInt.max - 1).msgpack(UInt.max))
	}

	func testUInt8() throws {
		XCTAssertEqual(try HPUInt8("uint8").msgpack(0).array, [])
		XCTAssertEqual(try HPUInt8("uint8").msgpack(UInt8.max).array, [0xA5, 0x75, 0x69, 0x6E, 0x74, 0x38, 0xCC, 0xFF])
	}

	func testUInt8Suppress() throws {
		XCTAssertEqual(try HPUInt8("uint8", suppressDefault: false).msgpack(0).array, [0xA5, 0x75, 0x69, 0x6E, 0x74, 0x38, 0x00])
		XCTAssertEqual(try HPUInt8("uint8", suppressDefault: false).msgpack(127).array, [0xA5, 0x75, 0x69, 0x6E, 0x74, 0x38, 0x7F])
		XCTAssertEqual(try HPUInt8("uint8", suppressDefault: false).msgpack(128).array, [0xA5, 0x75, 0x69, 0x6E, 0x74, 0x38, 0xCC, 0x80])
		XCTAssertEqual(try HPUInt8("uint8", suppressDefault: false).msgpack(UInt8.max).array, [0xA5, 0x75, 0x69, 0x6E, 0x74, 0x38, 0xCC, 0xFF])
		XCTAssertThrowsError(try HPUInt8("uint8", min: UInt8.min + 1).msgpack(UInt8.min))
		XCTAssertThrowsError(try HPUInt8("uint8", max: UInt8.max - 1).msgpack(UInt8.max))
	}

	func testUInt16() throws {
		XCTAssertEqual(try HPUInt16("uint16").msgpack(0).array, [])
		XCTAssertEqual(try HPUInt16("uint16").msgpack(UInt16.max).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xCD, 0xFF, 0xFF])
	}

	func testUInt16Suppress() throws {
		XCTAssertEqual(try HPUInt16("uint16", suppressDefault: false).msgpack(0).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36, 0x00])
		XCTAssertEqual(try HPUInt16("uint16", suppressDefault: false).msgpack(127).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36, 0x7F])
		XCTAssertEqual(try HPUInt16("uint16", suppressDefault: false).msgpack(128).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xCC, 0x80])
		XCTAssertEqual(try HPUInt16("uint16", suppressDefault: false).msgpack(UInt16(UInt8.max)).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xCC, 0xFF])
		XCTAssertEqual(try HPUInt16("uint16", suppressDefault: false).msgpack(UInt16.max).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36, 0xCD, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPUInt16("uint16", min: UInt16.min + 1).msgpack(UInt16.min))
		XCTAssertThrowsError(try HPUInt16("uint16", max: UInt16.max - 1).msgpack(UInt16.max))
	}

	func testUInt32() throws {
		XCTAssertEqual(try HPUInt32("uint32").msgpack(0).array, [])
		XCTAssertEqual(try HPUInt32("uint32").msgpack(UInt32.max).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF])
	}

	func testUInt32Suppress() throws {
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(0).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x00])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(127).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x7F])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(128).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCC, 0x80])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(UInt32(UInt8.max)).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCC, 0xFF])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(UInt32(UInt8.max) + 1).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCD, 0x01, 0x00])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(UInt32(UInt16.max)).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCD, 0xFF, 0xFF])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(UInt32(UInt16.max) + 1).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCE, 0x00, 0x01, 0x00, 0x00])
		XCTAssertEqual(try HPUInt32("uint32", suppressDefault: false).msgpack(UInt32.max).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPUInt32("uint32", min: UInt32.min + 1).msgpack(UInt32.min))
		XCTAssertThrowsError(try HPUInt32("uint32", max: UInt32.max - 1).msgpack(UInt32.max))
	}

	func testUInt64() throws {
		XCTAssertEqual(try HPUInt64("uint64").msgpack(0).array, [])
		XCTAssertEqual(try HPUInt64("uint64").msgpack(UInt64.max).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
	}

	func testUInt64Suppress() throws {
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(0).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0x00])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(127).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0x7F])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(128).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCC, 0x80])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64(UInt8.max)).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCC, 0xFF])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64(UInt8.max) + 1).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCD, 0x01, 0x00])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64(UInt16.max)).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCD, 0xFF, 0xFF])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64(UInt16.max) + 1).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCE, 0x00, 0x01, 0x00, 0x00])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64(UInt32.max)).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64(UInt32.max) + 1).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPUInt64("uint64", suppressDefault: false).msgpack(UInt64.max).array, [0xA6, 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPUInt64("uint64", min: UInt64.min + 1).msgpack(UInt64.min))
		XCTAssertThrowsError(try HPUInt64("uint64", max: UInt64.max - 1).msgpack(UInt64.max))
	}

#if swift(>=5.3) && (os(iOS) || os(watchOS) || os(tvOS))
	@available(iOS 14.0, watchOS 7.0, tvOS 14.0, *)
	func testFloat16() throws {
		XCTAssertThrowsError(try HPFloat16("float16").msgpack(10))
	}
#endif

	func testFloat() throws {
		XCTAssertEqual(try HPFloat("float").msgpack(0).array, [])
		XCTAssertEqual(try HPFloat("float").msgpack(Float.leastNormalMagnitude).array, [0xA5, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x00, 0x80, 0x00, 0x00])
		XCTAssertEqual(try HPFloat("float").msgpack(Float.greatestFiniteMagnitude).array, [0xA5, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x7F, 0x7F, 0xFF, 0xFF])
	}

	func testFloatSuppress() throws {
		XCTAssertEqual(try HPFloat("float", suppressDefault: false).msgpack(0).array, [0xA5, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPFloat("float", suppressDefault: false).msgpack(Float.leastNormalMagnitude).array, [0xA5, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x00, 0x80, 0x00, 0x00])
		XCTAssertEqual(try HPFloat("float", suppressDefault: false).msgpack(Float.greatestFiniteMagnitude).array, [0xA5, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x7F, 0x7F, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPFloat("float", min: 40).msgpack(20))
		XCTAssertThrowsError(try HPFloat("float", max: 40).msgpack(60))
	}

	func testDouble() throws {
		XCTAssertEqual(try HPDouble("double").msgpack(0).array, [])
		XCTAssertEqual(try HPDouble("double").msgpack(Double.leastNormalMagnitude).array, [0xA6, 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0xCB, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPDouble("double").msgpack(Double.greatestFiniteMagnitude).array, [0xA6, 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0xCB, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
	}

	func testDoubleSuppress() throws {
		XCTAssertEqual(try HPDouble("double", suppressDefault: false).msgpack(0).array, [0xA6, 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0xCB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPDouble("double", suppressDefault: false).msgpack(Double.leastNormalMagnitude).array, [0xA6, 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0xCB, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPDouble("double", suppressDefault: false).msgpack(Double.greatestFiniteMagnitude).array, [0xA6, 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0xCB, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
		XCTAssertThrowsError(try HPDouble("double", min: 40).msgpack(20))
		XCTAssertThrowsError(try HPDouble("double", max: 40).msgpack(60))
	}

#if swift(>=1.1) && os(macOS)
	@available(macOS 10.10, *)
	func testFloat80() throws {
		XCTAssertThrowsError(try HPFloat80("float80").msgpack(10))
	}
#endif

	func testCGFloat() throws {
		XCTAssertEqual(try HPCGFloat("cgfloat").msgpack(0).array, [])
#if arch(i386) || arch(arm)
		XCTAssertEqual(try HPCGFloat("cgfloat").msgpack(CGFloat.leastNormalMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x00, 0x80, 0x00, 0x00])
		XCTAssertEqual(try HPCGFloat("cgfloat").msgpack(CGFloat.greatestFiniteMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x7F, 0x7F, 0xFF, 0xFF])
#else
		XCTAssertEqual(try HPCGFloat("cgfloat").msgpack(CGFloat.leastNormalMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCB, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPCGFloat("cgfloat").msgpack(CGFloat.greatestFiniteMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCB, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
#endif
	}

	func testCGFloatSuppress() throws {
#if arch(i386) || arch(arm)
		XCTAssertEqual(try HPCGFloat("cgfloat", suppressDefault: false).msgpack(0).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPCGFloat("cgfloat", suppressDefault: false).msgpack(CGFloat.leastNormalMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x00, 0x80, 0x00, 0x00])
		XCTAssertEqual(try HPCGFloat("cgfloat", suppressDefault: false).msgpack(CGFloat.greatestFiniteMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCA, 0x7F, 0x7F, 0xFF, 0xFF])
#else
		XCTAssertEqual(try HPCGFloat("cgfloat", suppressDefault: false).msgpack(0).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPCGFloat("cgfloat", suppressDefault: false).msgpack(CGFloat.leastNormalMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCB, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
		XCTAssertEqual(try HPCGFloat("cgfloat", suppressDefault: false).msgpack(CGFloat.greatestFiniteMagnitude).array, [0xA7, 0x63, 0x67, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCB, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
#endif
		XCTAssertThrowsError(try HPCGFloat("cgfloat", min: 40).msgpack(20))
		XCTAssertThrowsError(try HPCGFloat("cgfloat", max: 40).msgpack(60))
	}
}
